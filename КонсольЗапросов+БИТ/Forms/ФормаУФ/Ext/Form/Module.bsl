
// Клиент
&НаКлиенте
Перем мШиринаКолонокПоУмолчанию;

&НаКлиенте
Перем ЗакрытьВсеРавно;

&НаКлиенте
Перем мСтрокаПеретаскивания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем Замер_Начало;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТонкийКлиент();
	мШиринаКолонокПоУмолчанию = 15;
	ИнициализироватьДеревоЗапросов(Неопределено);
	СоставРезультатов = 1;
	
	
	ПримерЧтенияТаблицы = "ТаблицаАвто = Новый ТаблицаЗначений;
	|ТаблицаАвто.Колонки.Добавить(""НомерСтроки"", Новый ОписаниеТипов(""Число""));
	|ТаблицаАвто.Колонки.Добавить(""УНА"", Новый ОписаниеТипов(""Строка"",, Новый КвалификаторыСтроки(8)));
	|
	|Для НомерСтроки = 1 по ТаблицаИстоник.ВысотаТаблицы цикл 
	|	НоваяСтрока = ТаблицаАвто.Добавить();
	|	НоваяСтрока.НомерСтроки = НомерСтроки;
	|	НоваяСтрока.УНА = ТаблицаИстоник.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
	|КонецЦикла;";
	
	ПроверитьВозможностьРаботыВФоне();
	УправлениеВыполнятьВФоне();
	
	ВыводитьПоказателиПроизводительностиПриИзменении(0);
	
	ОбновитьРасположениеПанелей();
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Отказ = Модифицированность;
	
	Если Модифицированность тогда
		СохранитьНаработки("Закрыть");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	
	ТекстЗапросНеВыбран = нСтр("ru='Запрос не выбран!'; en='No query selected!'");
	
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		
	ЭлементДерева = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ЭлементДерева <> Неопределено Тогда
		Если ЗначениеЗаполнено(ЭлементДерева.ТекстЗапроса) Тогда
			Конструктор = Новый КонструкторЗапроса(ЭлементДерева.ТекстЗапроса);
		Иначе
			Конструктор = Новый КонструкторЗапроса();
		КонецЕсли;
		Если Конструктор.ОткрытьМодально() Тогда
			ЭлементДерева.ТекстЗапроса = Конструктор.Текст;
		Иначе
			Модифицированность = Ложь;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,ТекстЗапросНеВыбран);
		Модифицированность = Ложь;
	КонецЕсли;
	
	#Иначе
		
		Если ВерсияПриложения > "8.3.5" тогда
			ЭлементДерева = Элементы.ДеревоЗапросов.ТекущиеДанные;
			Если ЭлементДерева <> Неопределено Тогда
				Выполнить("
				|Оп = Новый ОписаниеОповещения(""ВыполнитьПослеЗакрытияКонструктораЗапроса"", ЭтотОбъект);		
				|КЗ = Новый КонструкторЗапроса(ЭлементДерева.ТекстЗапроса);
				|КЗ.Показать(Оп);");
			Иначе
				ПоказатьПредупреждение(,ТекстЗапросНеВыбран);
			КонецЕсли;
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияКонструктораЗапроса(Текст, ДополнительныеПараметры) Экспорт
	
	ЭлементДерева = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если Текст = Неопределено ИЛИ ЭлементДерева = Неопределено тогда	
		Возврат;	
	КонецЕсли;
	
	Если ЭлементДерева <> Неопределено Тогда
		ЭлементДерева.ТекстЗапроса = Текст;
	КонецЕсли;
	ЗаполнитьПараметры(Неопределено)
	
КонецПроцедуры

&НаКлиенте
Процедура ТонкийКлиент()
	
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	
	#Если ТонкийКлиент ИЛИ ВебКлиент Тогда
		
	Заголовок = Заголовок + " (тонкий клиент)";
	
	Если СисИнфо.ВерсияПриложения<"8.3.5" тогда
		Элементы.ОткрытьКонструктор.Доступность = Ложь; 
		Элементы.ОткрытьКонструкторИзКонтекстногоМеню.Доступность = Ложь;
	КонецЕсли;	
	
#КонецЕсли

	Если СисИнфо.ВерсияПриложения<"8.3.5" тогда
		Элементы.АктуальныеРезультаты.Видимость = Ложь;
		АктуальныеРезультаты = Ложь;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьДеревоЗапросов(Команда)
	
	Если Модифицированность тогда
		СохранитьНаработки("Новый");
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	Запросы = ДеревоЗапросов.ПолучитьЭлементы();
	Запросы.Очистить();
	ИнициализироватьЗапрос(Запросы.Добавить(), нСтр("ru='Запросы'; en='Queries'"));
	
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура кнВыполнитьЗапрос(Команда)
	
	ЭлементДерева = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ЭлементДерева = Неопределено тогда
		ПоказатьПредупреждение(,нСтр("ru='Запрос не выбран!'; en='No query selected!'"));
		Возврат;
	КонецЕсли;
	
	Если ЭлементДерева.ТекстЗапроса = "" Тогда
		ПоказатьПредупреждение(,нСтр("ru='Текст запроса пустой!'; en='Query is empty!'"));
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗапрос();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлЗапросов(Команда)
	
	Если Модифицированность тогда 
		СохранитьНаработки("Загрузить");
		Возврат;
	КонецЕсли;
	
	Диалог = ПолучитьДиалогВыбораФайла();
	Диалог.Показать(Новый ОписаниеОповещения("ЗагрузитьФайлЗапросов_ПослеВыбораИмениФайла", ЭтотОбъект));
	
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлЗапросов_ПослеВыбораИмениФайла(ВыбранныеФайлы, ДополнительныеПараметр) Экспорт
	
	Если ВыбранныеФайлы = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ВыбранныеФайлы[0];
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ЗагрузитьФайлЗапросов_ПослеПомещенияФайлаВХранилище", ЭтотОбъект),,ПутьКФайлу, Ложь);
	//ВызовПолучитьДерево(ПередатьНаСервер(ПутьКФайлу), мШиринаКолонокПоУмолчанию); 
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьФайлЗапросов_ПослеПомещенияФайлаВХранилище(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат тогда
		
		ВызовПолучитьДерево(Адрес, мШиринаКолонокПоУмолчанию);
		ОбновитьЗаголовок();

	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СохранитьФайлЗапросов(Команда = Неопределено, Действие = "")
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		СохранениеФайла(ПутьКФайлу, Действие);
	Иначе
		ВыбратьФайлИСохранить(Действие);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗапрос(Команда)
	
	ГридДереваЗапросов = Элементы.ДеревоЗапросов;
	ТекущийЗапрос = ГридДереваЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос <> Неопределено Тогда
		ГридДереваЗапросов.ДобавитьСтроку();
		НовыйЗапрос = ГридДереваЗапросов.ТекущиеДанные;
		ИнициализироватьЗапрос(НовыйЗапрос, нСтр("ru='<без названия>'; en='<No title>'"));
		Модифицированность = Истина;
	Иначе
		Модифицированность = Ложь;
		ПоказатьПредупреждение(,нСтр("ru='Запрос-родитель не выбран'; en='Parent query is not selected'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗапрос(Команда)
	
	ГридЗапросов = Элементы.ДеревоЗапросов;
	ТекущийЗапрос = ГридЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос <> Неопределено Тогда
		РодительТекущего = ТекущийЗапрос.ПолучитьРодителя();
		Если РодительТекущего <> Неопределено Тогда
			НовыйЗапрос = РодительТекущего.ПолучитьЭлементы().Добавить();
			СкопироватьСтрокуДереваЗапросов(НовыйЗапрос, ТекущийЗапрос);
			ГридЗапросов.ТекущаяСтрока = НовыйЗапрос.ПолучитьИдентификатор();
		Иначе
			НовыйЗапрос = ДеревоЗапросов.ПолучитьЭлементы().Добавить();
			СкопироватьСтрокуДереваЗапросов(НовыйЗапрос, ТекущийЗапрос);
			ГридЗапросов.ТекущаяСтрока = НовыйЗапрос.ПолучитьИдентификатор();
//			Предупреждение("Нельзя скопировать корневой элемент");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗапрос(Команда)
	
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос <> Неопределено Тогда
		Родитель = ТекущийЗапрос.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда
			Родитель.ПолучитьЭлементы().Удалить(ТекущийЗапрос);
		Иначе
			ПоказатьПредупреждение(,"Нельзя удалить корневой элемент");
			Модифицированность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросВверх(Команда)
	СдвинутьЗапрос(-1);
КонецПроцедуры

&НаКлиенте
Процедура ЗапросВниз(Команда)
	СдвинутьЗапрос(1);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметры(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗначениеВозврата = ВызовЗаполнитьПараметры(ТекущиеДанные.ПолучитьИдентификатор());
		Если ТипЗнч(ЗначениеВозврата) = Тип("Структура") Тогда
//			ТекущиеДанные.ПараметрыЗапроса.Очистить();
			СтруктураПоиска = Новый Структура;
			Для каждого ПараметрЗапроса из ЗначениеВозврата Цикл
				СтруктураПоиска.Вставить("ИмяПараметра", ПараметрЗапроса.Ключ);
				НайденныеСтроки = ТекущиеДанные.ПараметрыЗапроса.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество()=0 тогда
					НовыйПараметр = ТекущиеДанные.ПараметрыЗапроса.Добавить();
					НовыйПараметр.ИмяПараметра = ПараметрЗапроса.Ключ;
				Иначе
					НовыйПараметр = НайденныеСтроки[0];
				КонецЕсли;
				
				Если ТипЗнч(НовыйПараметр.ЗначениеПараметра)<>Тип("СписокЗначений") тогда 
					НовыйПараметр.ЗначениеПараметра = ПараметрЗапроса.Значение.ПривестиЗначение(НовыйПараметр.ЗначениеПараметра);
				Иначе
					НовыйПараметр.ЭтоСписок = Истина;
				КонецЕсли;
			КонецЦикла;
			
			//м+ Малахов А.А. 28.12.2016
			УпорядочитьПараметры(ТекущиеДанные.ПараметрыЗапроса);
			//MMC-
		Иначе
			Сообщить(ЗначениеВозврата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультат(Команда)
	
	Если ПолеРезультатаЗапроса.ВысотаТаблицы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = "Файл Excel (*.xls)|*.xls|Табличный документ (*.mxl)|*.mxl";
	Диалог.Показать(Новый ОписаниеОповещения("СохранитьРезультат_ПослеВыбораИмениФайла", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультат_ПослеВыбораИмениФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы=Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Расширение = ".mxl" Тогда
		ТипФайла = ТипФайлаТабличногоДокумента.MXL;
	ИначеЕсли Файл.Расширение = ".xls" Тогда
		ТипФайла = ТипФайлаТабличногоДокумента.XLS;
	КонецЕсли;

	ПолеРезультатаЗапроса.НачатьЗапись(, ИмяФайла, ТипФайла);
			
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКАК(Команда)
	
	ВыбратьФайлИСохранить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлИСохранить(ДействиеПослеСохранения="")
	
	Диалог = ПолучитьДиалогВыбораФайла();
	Диалог.Показать(Новый ОписаниеОповещения("СохранитьКАК_ПослеВыбораИмениФайла", ЭтотОбъект, Новый Структура("Действие", ДействиеПослеСохранения)));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКАК_ПослеВыбораИмениФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы=Неопределено тогда //Нажата отмена
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	
	Проверка = Новый Файл(ИмяФайла);  
	Проверка.НачатьПроверкуСуществования(Новый ОписаниеОповещения("СохранитьКАК_ПослеПроверкиСуществованияФайла", ЭтотОбъект, Новый Структура("ИмяФайла, Действие", ИмяФайла, ДополнительныеПараметры.Действие)));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКАК_ПослеПроверкиСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		
		ТекстВопроса = нСтр("ru = 'Файл %1 существует. Заменить?'; en='File %1 already exists. Overwrite?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ДополнительныеПараметры.ИмяФайла);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("СохранитьКАК_ПослеОтветаНаВопросОПерезаписи", ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,,,,);
		
	Иначе
		СохранениеФайла(ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры.Действие);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКАК_ПослеОтветаНаВопросОПерезаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да тогда
		
		СохранениеФайла(ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры.Действие);	
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена тогда
		
		Возврат;
		
	Иначе
		
		ВыполнитьДействиеПослеСохранения(ДополнительныеПараметры.Действие);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранениеФайла(ИмяФайла, Действие)
	
	ПреобразоватьИСохранитьДерево(ИмяФайла);
	
	ПутьКФайлу = ИмяФайла;
	Модифицированность = Ложь;
	
	ОбновитьЗаголовок();
	
	ВыполнитьДействиеПослеСохранения(Действие);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыделенныйТекст(Команда)
	
	ЭлементДерева = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ЭлементДерева <> Неопределено Тогда
		ПараметрыЗапроса = ЭлементДерева.ПараметрыЗапроса;
		ВыполнитьЗапрос();
	Иначе
		ПоказатьПредупреждение(,"Запрос должен быть выделен в дереве");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КакПереподчинить(Команда)
	ПоказатьПредупреждение(,"Для изменения подчиненности просто перетащите элемент мышью на нового родителя");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРезультат(Команда)
	ПолеРезультатаЗапроса = Новый ТабличныйДокумент();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекстЗапроса(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если Вопрос(нСтр("ru='Вы уверены?'; en='Are you sure?'"),РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
			ТекущиеДанные.ТекстЗапроса = "";
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеРезультатаЗапросаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("ТабличныйДокумент") Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормаВложеннойТаблицы = ПолучитьФорму(ПутьКФормам + "ФормаВложеннойТаблицыУФ");
		ФормаВложеннойТаблицы.ВладелецФормы                 = ЭтаФорма;
		ФормаВложеннойТаблицы.ЗакрыватьПриЗакрытииВладельца = Истина;
		ФормаВложеннойТаблицы.ШиринаКолонок                 = мШиринаКолонокПоУмолчанию;
		ФормаВложеннойТаблицы.ВложеннаяТаблица              = Расшифровка;
		ФормаВложеннойТаблицы.ВложеннаяТаблица.Область().ШиринаКолонки = мШиринаКолонокПоУмолчанию;
		ФормаВложеннойТаблицы.Открыть();
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") тогда
		
		Если Расшифровка.Тип = "ПомещениеВВТ" тогда
			
			СтандартнаяОбработка = Ложь;
			
			НомерСтроки = ПомещениеВоВТ(Расшифровка.ИмяТаблицы);
		
			Если НомерСтроки <> 0 тогда
				
				Элементы.ТекстЗапроса.УстановитьГраницыВыделения(НомерСтроки, 1, НомерСтроки, 1);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Расшифровка) тогда
		
		СтандартнаяОбработка = ЛОЖЬ;
		ПоказатьПредупреждение(,нСтр("ru='Тип'; en='Type'")+": <"+ТипЗнч(Расшифровка)+">",,нСтр("ru='Пустое значение!'; en='Empty value!'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПомещениеВоВТ(ИмяТаблицы)
	
	Если Элементы.ДеревоЗапросов.ТекущиеДанные=Неопределено тогда
		Возврат 0;
	КонецЕсли;
	
	ИмяВТ = ВРЕГ(ИмяТаблицы);
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(Элементы.ДеревоЗапросов.ТекущиеДанные.ТекстЗапроса);
	КолСтрок = ТД.КоличествоСтрок();
	НайденнаяСтрока = 0; ИИ = 0;
	
	Пока НайденнаяСтрока = 0 И ИИ<=КолСтрок цикл
		
		ИИ=ИИ+1;
		ТекСтрока = ВРЕГ(ТД.ПолучитьСтроку(ИИ));
		Если Найти(ТекСтрока, "ПОМЕСТИТЬ")<>0 И Найти(ТекСтрока, ИмяВТ)<>0 тогда
			НайденнаяСтрока = ИИ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденнаяСтрока;
		
КонецФункции

&НаКлиенте
Процедура ИмяЗапросаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапросаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолеШиринаКолонокРегулирование(Элемент)
	
	УстановитьШиринуКолонок();
	Модифицированность = Истина;
	
	Если АвтоширинаКолонок тогда
		АвтоширинаКолонок = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВыгрузкиПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.СписокПараметров.ТекущиеДанные.ЗначениеПараметра = Неопределено;
	Элемент.ВыбиратьТип  = Истина;
	Элемент.КнопкаВыбора = Истина;
	СтандартнаяОбработка = Ложь;
	
	Элементы.СписокПараметров.ТекущиеДанные.ЭтоСписок = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначениеПараметраПриИзменении(Элемент)
	
	ТекущееОписание = Элементы.СписокПараметров.ТекущиеДанные;
	Значение = ТекущееОписание.ЗначениеПараметра;
	Если ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда
		ЗаданныеТипы = Значение.Типы();
		Если ЗаданныеТипы.Количество() > 1 Тогда
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(ЗаданныеТипы[0]);
			ТекущееОписание.ЗначениеПараметра = Новый ОписаниеТипов(МассивТипов);
			ПоказатьПредупреждение(,"Задан составной тип. Будет использован первый из состава типов");
		КонецЕсли;
	КонецЕсли;
	
	//+АРД
	Если ТекущееОписание.ИмяПараметра = "Сценарий" 
		И ЗначениеЗаполнено(Значение) 
		И ТипЗнч(Значение) = Тип("СправочникСсылка.СценарииПланирования")  тогда
		
		СтруктураПараметров = ард_ПолучитьПериодСценарияСервер(Значение);
		ТаблицаПараметров = Элементы.ДеревоЗапросов.ТекущиеДанные.ПараметрыЗапроса;

		Для каждого ПараметрЗапроса из ТаблицаПараметров цикл 
			Если ПараметрЗапроса.ИмяПараметра = "НачалоПериода" тогда
				ПараметрЗапроса.ЗначениеПараметра = СтруктураПараметров.НачалоПериода
			ИначеЕсли ПараметрЗапроса.ИмяПараметра = "КонецПериода" ИЛИ ПараметрЗапроса.ИмяПараметра = "КонецПериодаДата" тогда 
				ПараметрЗапроса.ЗначениеПараметра = СтруктураПараметров.КонецПериода;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТекущееОписание.ИмяПараметра = "НачалоПериода" тогда
		
		ТаблицаПараметров = Элементы.ДеревоЗапросов.ТекущиеДанные.ПараметрыЗапроса;
		
		Если ЗначениеЗаполнено(ТекущееОписание.ЗначениеПараметра) тогда
			Для каждого ПараметрЗапроса из ТаблицаПараметров цикл
				Если (ПараметрЗапроса.ИмяПараметра = "КонецПериода" ИЛИ ПараметрЗапроса.ИмяПараметра = "КонецПериодаДата")  
					И (НЕ ЗначениеЗаполнено(ПараметрЗапроса.ЗначениеПараметра) ИЛИ ПараметрЗапроса.ЗначениеПараметра<ТекущееОписание.ЗначениеПараметра) тогда
					
					ПараметрЗапроса.ЗначениеПараметра = КонецМесяца(ТекущееОписание.ЗначениеПараметра);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
			
	КонецЕсли;
	
	ТекущееОписание.ЭтоСписок = ТипЗнч(ТекущееОписание.ЗначениеПараметра) = Тип("СписокЗначений");
	
	//-АРД
	
КонецПроцедуры

&НаСервере
Функция ард_ПолучитьПериодСценарияСервер(Сценарий);
	
	Попытка 
		Возврат Новый Структура("НачалоПериода, КонецПериода", Сценарий.ард_ДатаНачала, КонецДня(Сценарий.ард_ДатаОкончания));
	Исключение
		Возврат Неопределено;	
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура СписокПараметровПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент <> Элементы.ТаблицаЗначениеПараметра тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ЗначениеПараметра = Неопределено Тогда
		Элемент.ТекущийЭлемент.ВыбиратьТип = Истина;
	Иначе
		Элемент.ТекущийЭлемент.ВыбиратьТип = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	мСтрокаПеретаскивания = Элемент.ТекущиеДанные;
	ПараметрыПеретаскивания.Значение = "";
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		НовыйРодитель = ДеревоЗапросов.НайтиПоИдентификатору(Строка);
		Потомок = мСтрокаПеретаскивания;
		ПрежнийРодитель = Потомок.ПолучитьРодителя();
		Если НЕ ((ПрежнийРодитель = Неопределено) ИЛИ (Строка = ПрежнийРодитель.ПолучитьИдентификатор())) Тогда
			Если НЕ ВИерархии(НовыйРодитель, Потомок) Тогда
				Если Вопрос("Переподчинить элемент """ + Потомок.Запрос + """ элементу """ + НовыйРодитель.Запрос + """?", 
						РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					Подчинить(Потомок, НовыйРодитель.ПолучитьЭлементы());
					ПрежняяСемья = ПрежнийРодитель.ПолучитьЭлементы();
					ПрежняяСемья.Удалить(ПрежняяСемья.Индекс(Потомок));
					Модифицированность = Истина;
				КонецЕсли;
			Иначе
				ПоказатьПредупреждение(,"Зацикливание подчиненности - переподчинение невозможно");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокуДереваЗапросов(НовыйЗапрос, ТекущийЗапрос)
	ЗаполнитьЗначенияСвойств(НовыйЗапрос, ТекущийЗапрос, , "ПараметрыЗапроса");
	ПараметрыТекущего = ТекущийЗапрос.ПараметрыЗапроса;
	ПараметрыНового = НовыйЗапрос.ПараметрыЗапроса;
	Для каждого СтрокаПараметр из ПараметрыТекущего Цикл
		СтрокаПараметрНового = ПараметрыНового.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПараметрНового, СтрокаПараметр);
	КонецЦикла;
	ДочерниеЗапросы = ТекущийЗапрос.ПолучитьЭлементы();
	ДочерниеЗапросыНового = НовыйЗапрос.ПолучитьЭлементы();
	Для каждого ДочернийЗапрос из ДочерниеЗапросы Цикл;
		НовыйДочернийЗапрос = ДочерниеЗапросыНового.Добавить();
		СкопироватьСтрокуДереваЗапросов(НовыйДочернийЗапрос, ДочернийЗапрос);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьЗапрос()
	
	Замер_Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ВыполнятьВФоне Тогда
		ВыполнитьЗапросВФоновомЗаданииКлиент();
	Иначе
		
		ПолеРезультатаЗапроса = Новый ТабличныйДокумент();
		Результат = ВыполнитьЗапросНепосредственно();
		ВывестиРезультатЗапроса(Результат);
		Замер_Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		
		Если ТипЗнч(Результат) = Тип("Структура") тогда
			ЗаполнитьСсылкиВРежимеПодбораСсылок(Результат);
			Результат.Вставить("ОбщееВремя", Замер_Конец-Замер_Начало); 
			ВывестиПоказателиПроизводительности(Результат);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШиринуКолонок()
	
	Если АвтоширинаКолонок тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ШиринаКолонок = ТекущиеДанные.ШиринаКолонок;
		Если ШиринаКолонок > 0 Тогда
			ПолеРезультатаЗапроса.Область().ШиринаКолонки = ШиринаКолонок;
		Иначе
			ПолеРезультатаЗапроса.Область().ШиринаКолонки = мШиринаКолонокПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДиалогВыбораФайла()
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок  = "Выберите файл со списком запросов";
	Диалог.Фильтр     = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
	Диалог.Расширение = "sel";
	Возврат Диалог;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаработки(ДействиеПослеСохранения)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СохранитьНаработки_ПослеОтветаНаВопрос", ЭтаФорма, Новый Структура("Действие", ДействиеПослеСохранения)), нСтр("ru='Сохранить файл запросов?'; en='Save file?'"), РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаработки_ПослеОтветаНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		СохранитьФайлЗапросов(, ДополнительныеПараметры.Действие);
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет тогда
		
		Модифицированность = Ложь;
		ВыполнитьДействиеПослеСохранения(ДополнительныеПараметры.Действие);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеПослеСохранения(Действие);
	
	Если Действие = "Закрыть" тогда
		Закрыть();
	ИначеЕсли Действие = "Новый" тогда
		ИнициализироватьДеревоЗапросов(Неопределено);
	ИначеЕсли Действие = "Загрузить" тогда
		ЗагрузитьФайлЗапросов(Неопределено);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьЗапрос(ЭлементДереваЗапросов, ИмяЗапроса = "")
	ЭлементДереваЗапросов.Запрос         = ИмяЗапроса;
	ЭлементДереваЗапросов.ТекстЗапроса   = "";
	ЭлементДереваЗапросов.ТекстПараметров  = "";
	ЭлементДереваЗапросов.СпособВыгрузки = 1;
	ЭлементДереваЗапросов.ШиринаКолонок  = мШиринаКолонокПоУмолчанию;
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьЗапрос(Направление)
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос <> Неопределено Тогда
		Родитель = ТекущийЗапрос.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда
			Семейство = Родитель.ПолучитьЭлементы();
			Индекс = Семейство.Индекс(ТекущийЗапрос);
			Если ((Направление = 1) И (Индекс < Семейство.Количество() - 1)) 
				ИЛИ ((Направление = -1) И (Индекс > 0)) Тогда
					Семейство.Сдвинуть(Индекс, Направление);
					Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьИСохранитьДерево(ПутьКФайлу)
	
	АдресХранилища = ВызовПреобразоватьДерево();
	ПолучитьФайл(АдресХранилища, ПутьКФайлу, Ложь);
	УдалитьИзВременногоХранилища(АдресХранилища);
	
КонецПроцедуры

&НаКлиенте
Функция ВИерархии(НовыйРодитель, Потомок)
	ПредокНовогоРодителя = НовыйРодитель.ПолучитьРодителя();
	Проверять = Истина;
	Результат = Ложь;
	Пока Проверять Цикл
		Если ПредокНовогоРодителя <> Неопределено Тогда
			Если ПредокНовогоРодителя = Потомок Тогда
				Проверять = Ложь;
				Результат = Истина;
			Иначе
				ПредокНовогоРодителя = ПредокНовогоРодителя.ПолучитьРодителя();
			КонецЕсли;
		Иначе
			Проверять = Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Подчинить(Потомок, НоваяСемья)
	
	НоваяСтрока = НоваяСемья.Добавить();
	НоваяСтрока.Запрос         = Потомок.Запрос;
	НоваяСтрока.ТекстЗапроса   = Потомок.ТекстЗапроса;
	НоваяСтрока.ТекстПараметров   = Потомок.ТекстПараметров;
	НоваяСтрока.СпособВыгрузки = Потомок.СпособВыгрузки;
	НоваяСтрока.ШиринаКолонок  = Потомок.ШиринаКолонок;
	СкопироватьПараметры(НоваяСтрока.ПараметрыЗапроса, Потомок.ПараметрыЗапроса);
	ПотомкиПотомка = Потомок.ПолучитьЭлементы();
	Для Каждого ПотомокПотомка из ПотомкиПотомка Цикл
		Подчинить(ПотомокПотомка, НоваяСтрока.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПараметры(ТаблицаПриемник, ТаблицаИсточник)
	Для каждого СтрокаИсточник из ТаблицаИсточник Цикл
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Функция ПередатьНаСервер(ПутьКФайлу)
	
	//Перем АдресХранилища;
	//
	//ПоместитьФайл(АдресХранилища, ПутьКФайлу, ПутьКФайлу, Ложь, УникальныйИдентификатор);
	//Возврат АдресХранилища;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПутьКФормам = ПолучитьОбработку().Метаданные().ПолноеИмя() + ".Форма.";
	
	Если Метаданные.Справочники.Найти("бит_ИсточникиДанных")=Неопределено тогда
		Элементы.ГруппаИсточникиДанныхБитФинанс.Видимость = Ложь;	
	КонецЕсли;
	
	Если Параметры.Свойство("ПодборСсылок") И Параметры.ПодборСсылок тогда
		ОбработкаКонсольЗапросов.ПодборСсылок = Истина;
	Иначе
		ОбработкаКонсольЗапросов.ПодборСсылок = Ложь;
	КонецЕсли;
	
 	ИнициализироватьНастройки();
	
	КонсольЗапросовСсылка = ПолучитьВнешнююОбработку("ард_КонсольЗапросов");
	Элементы.ВыборСсылок.Видимость = ОбработкаКонсольЗапросов.ПодборСсылок;
	
КонецПроцедуры
	
Процедура ИнициализироватьНастройки()
	
	МассивНастроек = Новый Массив;
	МассивНастроек.Добавить("Способ выгрузки");
	МассивНастроек.Добавить("GUID");
	МассивНастроек.Добавить("Выводить номера строк");
	МассивНастроек.Добавить("Только запросы с данными");
	МассивНастроек.Добавить("Результат в отдельное окно");
	МассивНастроек.Добавить("Состав результатов");
	МассивНастроек.Добавить("Выполнять в фоне");
	
	Для ИИ=1 По МассивНастроек.Количество() Цикл
		НоваяСтрока = Настройки.Добавить();
		НоваяСтрока.Имя = МассивНастроек[ИИ-1];
	КонецЦикла; 

КонецПроцедуры
 	

&НаСервере
Функция ВыполнитьЗапросНепосредственно()
	
	ЭтаОбработка = ПолучитьОбработку();
	ПараметрыВызова = ПодготовитьПараметры();
	Результат = ЭтаОбработка.ВыполнитьЗапрос(ПараметрыВызова);
	
	Если ЭтаОбработка.ПодборСсылок тогда
		ОбработкаКонсольЗапросов.СписокСсылок = ЭтаОбработка.СписокСсылок; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВызовПолучитьДерево(АдресХранилища, ШиринаКолонокПоУмолчанию)
	ПолучитьОбработку().ПолучитьДеревоИзФайла(АдресХранилища, ДеревоЗапросов, ШиринаКолонокПоУмолчанию);
КонецПроцедуры

&НаСервере
Функция ВызовПреобразоватьДерево()
	Возврат ПолучитьОбработку().ПреобразоватьДерево(ДеревоЗапросов);
КонецФункции

&НаСервере
Функция ВызовЗаполнитьПараметры(ИдентификаторТекущихДанных)
	Возврат ПолучитьОбработку().ЗаполнитьПараметрыЗапроса(ДеревоЗапросов, ИдентификаторТекущихДанных);
КонецФункции

&НаСервере
Функция ПолучитьОбработку()
	Возврат РеквизитФормыВЗначение("ОбработкаКонсольЗапросов");
КонецФункции

//БИТ+
&НаКлиенте
Процедура ЗаполнитьИзИсточникаДанных(Команда)
	
	ИсточникДанных = Неопределено;
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПослеВыбораИсточника", ЭтотОбъект),ИсточникДанных,нСтр("ru='Источник данных'; en='Data source'"),Тип("СправочникСсылка.бит_ИсточникиДанных"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИсточника(Значение, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИзИсточникаДанныхНаСервере(Значение);
	ЗаполнитьПараметры(Неопределено);
	Элементы.ДеревоЗапросов.ТекущиеДанные.Запрос = Значение;
		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзИсточникаДанныхНаСервере(ИсточникДанных)
	
	ЭлементДерева = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	
	Если ЭлементДерева = Неопределено или ИсточникДанных = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ЭлементДерева.ТекстЗапроса = ИсточникДанных.ЗапросБД.ТекстЗапроса;
	СтруктураПоиска = Новый Структура;
	НастройкаИсточника = ИсточникДанных.НастройкиПостроителя.Получить();
	
	Если ТипЗнч(НастройкаИсточника) = Тип("Структура") Тогда
		Для Каждого ПараметрЗапроса Из НастройкаИсточника.ПараметрыПостроителя Цикл
			
			СтруктураПоиска.Вставить("ИмяПараметра", ПараметрЗапроса.Ключ);
			НайденныеСтроки = ЭлементДерева.ПараметрыЗапроса.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество()=0 тогда
				НовыйПараметр = ЭлементДерева.ПараметрыЗапроса.Добавить();
				НовыйПараметр.ИмяПараметра = ПараметрЗапроса.Ключ;
			Иначе
				НовыйПараметр = НайденныеСтроки[0];
			КонецЕсли;
			
			Если ТипЗнч(ПараметрЗапроса.Значение)= Тип("СписокЗначений") тогда
				НовыйПараметр.ЗначениеПараметра = Новый СписокЗначений;
				Для каждого ЭлементСП из ПараметрЗапроса.Значение цикл
					НовыйПараметр.ЗначениеПараметра.Добавить(ЭлементСП.Значение);
				КонецЦикла;
			Иначе
				НовыйПараметр.ЗначениеПараметра = ПараметрЗапроса.Значение;
			КонецЕсли;                   ;
			
			ПустаяСсылка = Справочники["бит_СтатьиОборотов"].ПустаяСсылка();
			Если НовыйПараметр.ЗначениеПараметра = Неопределено тогда
				Если ЛЕВ(НовыйПараметр.ИмяПараметра, 14) = "СтатьяОборотов" тогда
					НовыйПараметр.ЗначениеПараметра = ПустаяСсылка;
				ИначеЕсли ЛЕВ(НовыйПараметр.ИмяПараметра, 14) = "СтатьиОборотов" тогда
					Список = Новый СписокЗначений;
					Список.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.бит_СтатьиОборотов");
					НовыйПараметр.ЗначениеПараметра = Список;
				КонецЕсли;
			КонецЕсли;
			
			НовыйПараметр.ЭтоСписок = ТипЗнч(НовыйПараметр.ЗначениеПараметра) = Тип("СписокЗначений");
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// fs_VSharpf {
&НаКлиенте
Процедура ЭкспортироватьВИсточник(Команда)
	
	Отказ = ПроверитьВозможностьЭкспортаВИсточникДанных();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
			
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("Обновить", "Обновить");
	КнопкиВопроса.Добавить("Создать",  "Создать");
	КнопкиВопроса.Добавить("Отмена",   "Отмена");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОВыбореИсточника", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Выберите действие с источником данных:", КнопкиВопроса);
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросОВыбореИсточника(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат = "Обновить" тогда
		
		ДопПараметры = Новый Структура("Обновить");
		ИмяФормыИсточника = "Справочник.бит_ИсточникиДанных.ФормаВыбора";
		
	ИначеЕсли Результат = "Создать" тогда
		
		ДопПараметры = Новый Структура("Создать");
		ИмяФормыИсточника = "Справочник.бит_ИсточникиДанных.ФормаВыбораГруппы";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОповещениеОЗакрытииФормыВыбораИсточника", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму(ИмяФормыИсточника,,ЭтотОбъект,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОЗакрытииФормыВыбораИсточника(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДополнительныеПараметры.Свойство("Обновить") Тогда
		
		ЗаполнитьИсточникДанных(Результат);
		ОткрытьФорму("Справочник.бит_ИсточникиДанных.ФормаОбъекта", Новый Структура("Ключ", Результат),,, ВариантОткрытияОкна.ОтдельноеОкно);
		
	ИначеЕсли ДополнительныеПараметры.Свойство("Создать") Тогда
		
		ИмяИсточника = Элементы.ДеревоЗапросов.ТекущиеДанные.Запрос;
		
		Если ВвестиЗначение(ИмяИсточника, "Введите имя создаваемого источника данных", Тип("Строка")) Тогда	
			
			Если ИмяИсточника = "" Тогда
				СообщитьПользователю(нСтр("ru='Имя источника не должно быть пустым'; en =''"));
			    Возврат;
			КонецЕсли;
			
			СсылкаНаИсточник = Неопределено;
			СоздатьИсточникДанных(Результат, ИмяИсточника, СсылкаНаИсточник);
			ОткрытьФорму("Справочник.бит_ИсточникиДанных.ФормаОбъекта", Новый Структура("Ключ", СсылкаНаИсточник),,, ВариантОткрытияОкна.ОтдельноеОкно);
			
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьИсточникДанных(ИсточникДанных, ОбновитьЗапрос = Истина)
	
	Модуль_бит_МеханизмПолученияДанных = ОбщийМодуль("бит_МеханизмПолученияДанных");
	Если Модуль_бит_МеханизмПолученияДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	МенеджерИсточникиДанных = Справочники["бит_ИсточникиДанных"];
	ЭлементДерева = ПолучитьЭлементДерева();
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ЭлементДерева.ТекстЗапроса;
	
	Если ОбновитьЗапрос Тогда
		ЗапросИсточника = ИсточникДанных.ЗапросБД.ПолучитьОбъект();
		СоздатьОбновитьЗапросИсточника(ПостроительЗапроса.Текст, ЗапросИсточника);
	КонецЕсли;	
	
	Если ТипЗнч(ИсточникДанных) = Тип("СправочникСсылка.бит_ИсточникиДанных") тогда
		ИсточникОбъект = ИсточникДанных.ПолучитьОбъект();
	Иначе
		ИсточникОбъект = ИсточникДанных;
	КонецЕсли;	
		
	МенеджерИсточникиДанных.ЗаполнитьПоля(ИсточникОбъект, ПостроительЗапроса);
	МассивЗапросов = Новый Массив;
	
	Модуль_бит_МеханизмПолученияДанных.ПолучитьЗапросыИсточников(ИсточникОбъект, МассивЗапросов);
	
	Исключения       = МенеджерИсточникиДанных.КонструкторМассиваПредопределенныхПараметров();
	СписокПараметров = МенеджерИсточникиДанных.ПолучитьПараметрыЗапросов(МассивЗапросов, Исключения);
	
	СтруктураПоиска      = Новый Структура;
	НастройкаИсточника   = ИсточникОбъект.НастройкиПостроителя.Получить();
		
	Если ТипЗнч(НастройкаИсточника) <> Тип("Структура") Тогда
		НастройкаИсточника = Новый Структура;
		НастройкаИсточника.Вставить("Отбор", Новый Массив);
		НастройкаИсточника.Вставить("НастройкиПараметров",  Новый Структура);
		НастройкаИсточника.Вставить("ПараметрыПостроителя", Новый Структура);
	КонецЕсли;	
		
	ПараметрыПостроителя    = НастройкаИсточника.ПараметрыПостроителя;
	НастройкиПараметров     = НастройкаИсточника.НастройкиПараметров;
	ТаблицаПараметровДерева = ЭлементДерева.ПараметрыЗапроса;
	МассивИсключений 		= МассивПараметровИсключений();
		
	Для каждого ПараметрЗапроса Из СписокПараметров Цикл
		
		КлючПараметра     = ПараметрЗапроса.Представление;
		ЗначениеПараметра = Неопределено;
		
		Если МассивИсключений.Найти(ВРег(КлючПараметра)) = Неопределено Тогда
			
			СтруктураПоиска.Вставить("ИмяПараметра", КлючПараметра);
			НайденныеСтроки   = ТаблицаПараметровДерева.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() > 0 тогда
				ЗначениеПараметра = НайденныеСтроки[0].ЗначениеПараметра;
			КонецЕсли;
			
			НастройкиПараметров.Вставить(КлючПараметра, Новый Структура("ОграничениеДоступности", Истина)); 
			
		Иначе
			
			НастройкиПараметров.Вставить(КлючПараметра, Новый Структура("ОграничениеДоступности", Ложь)); 
			
		КонецЕсли;
		
		ПараметрыПостроителя.Вставить(КлючПараметра, ЗначениеПараметра);
		
	КонецЦикла;
	
	ХранилищеДанных = Новый ХранилищеЗначения(НастройкаИсточника);
	ИсточникОбъект.НастройкиПостроителя = ХранилищеДанных;
	ИсточникОбъект.Записать();
	

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция МассивПараметровИсключений()
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("СЦЕНАРИЙ");
	МассивИсключений.Добавить("ССЫЛКАНАДОКУМЕНТ");
	//МассивИсключений.Добавить("БЮДЖЕТ");
	
	Возврат МассивИсключений;

КонецФункции 

&НаСервере
Процедура СоздатьИсточникДанных(Родитель, ИмяИсточника, СсылкаНаИсточник = Неопределено)
	
	ЭлементДерева = ПолучитьЭлементДерева();
	
	ИсточникДанных = Справочники.бит_ИсточникиДанных.СоздатьЭлемент();
	ИсточникДанных.Наименование = ИмяИсточника;
	ИсточникДанных.Родитель     = Родитель;
	ИсточникДанных.ВидИнформационнойБазы = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;
	ИсточникДанных.ТипИсточника = Перечисления.бит_ТипыИсточниковДанных.Отчетность;
	
	ЗапросИсточника = Неопределено;
	СоздатьОбновитьЗапросИсточника(ЭлементДерева.ТекстЗапроса, ЗапросИсточника, ИмяИсточника, Родитель.Наименование);
	
	ИсточникДанных.ЗапросБД = ЗапросИсточника.Ссылка;
	
	ЗаполнитьИсточникДанных(ИсточникДанных, Ложь);
	
	СсылкаНаИсточник = ИсточникДанных.Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОбновитьЗапросИсточника(ТекстЗапроса, ЗапросИсточника = Неопределено, ИмяИсточника = "", НаименованиеГруппы = "")
	
	Если ЗапросИсточника = Неопределено Тогда
		
		// создадим запрос
		ГруппаЗапроса = Неопределено;
		Если НЕ НаименованиеГруппы = "" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	бит_Запросы.Ссылка
			|ИЗ
			|	Справочник.бит_Запросы КАК бит_Запросы
			|ГДЕ
			|	бит_Запросы.Наименование = &Наименование
			|	И бит_Запросы.ЭтоГруппа";
			
			Запрос.УстановитьПараметр("Наименование", НаименованиеГруппы);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				ГруппаЗапроса = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;
			
		КонецЕсли;	
		
		ЗапросИсточника = Справочники.бит_Запросы.СоздатьЭлемент();
		ЗапросИсточника.Наименование          = ИмяИсточника;
		ЗапросИсточника.ВидИнформационнойБазы = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;
		
		Если НЕ ГруппаЗапроса = Неопределено Тогда
			ЗапросИсточника.Родитель = ГруппаЗапроса;
		КонецЕсли;
		
	КонецЕсли;	
		
	ЗапросИсточника.ТекстЗапроса = ТекстЗапроса;
	ЗапросИсточника.Записать();

КонецПроцедуры                                           

&НаСервере
Функция ПроверитьВозможностьЭкспортаВИсточникДанных()
		
	Отказ = Ложь;
	
	ЭлементДерева = ПолучитьЭлементДерева();
	
	Если ЭлементДерева = Неопределено Тогда
		СообщитьПользователю("Не выбран запрос в дереве");
		Отказ = Истина;
		Возврат Отказ;
	КонецЕсли;	
	
	Если ЭлементДерева.ТекстЗапроса = "" Тогда
		СообщитьПользователю("Текст выбранного запроса пустой!");
		Отказ = Истина;
		Возврат Отказ;
	КонецЕсли;	
	
	// проверим текст запроса
	ПостроительЗапроса = Новый ПостроительЗапроса;
	
	Попытка
		ПостроительЗапроса.Текст = ЭлементДерева.ТекстЗапроса;
	Исключение
		ТекстСообщения = Нстр("ru = 'Текст запроса не корректен. '") + ОписаниеОшибки();
		СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат Отказ;
	КонецПопытки;
	
	Если ПостроительЗапроса.ВыбранныеПоля.Количество() = 0 Тогда
		ТекстСообщения = Нстр("ru = 'Не выбрано ни одного поля в построителе запроса.'");
		СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат Отказ;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции 

&НаСервере
Функция ПолучитьЭлементДерева()

	ЭлементДерева = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	Возврат ЭлементДерева;

КонецФункции 

// fs_VSharpf }
//БИТ-

//АРД+
&НаКлиентеНаСервереБезКонтекста
Функция ОбщийМодуль(Имя)
	
	Если МодульСуществует(Имя) тогда
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

&НаСервереБезКонтекста
Функция МодульСуществует(ИмяМодуля)
	
	Возврат Метаданные.ОбщиеМодули.Найти(ИмяМодуля) <> Неопределено;
	
КонецФункции

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы.
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - Выходной параметр.
//                               Всегда устанавливается в значение Истина.
//
//	Пример:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых.
//  3. Установка ссылки без установки поля (и/или пути к данным).
//
&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовок()
	
	Заголовок = нСтр("ru='Консоль запросов'; en='Query console'")+?(ПутьКФайлу="",""," ("+ПутьКФайлу+")");
	
КонецПроцедуры

// Процедура выполняет сортировку параметров запроса 
// таким образом, чтобы параметр именем "НачалоПериода" оказался перед параметром с именем "КонецПериода"
// Для модификации списка пар параметров модифицировать структуру "ПарыПараметров"
&НаКлиенте
Процедура УпорядочитьПараметры(ПараметрыЗапроса);
	
	ПарыПараметров = Новый Структура;
	ПарыПараметров.Вставить("НачалоПериода", "КонецПериода");
	ПарыПараметров.Вставить("КонецПериода",  "КонецПериодаДата");
	
	СтруктураПоиска1 = Новый Структура;
	СтруктураПоиска2 = Новый Структура;
	
	Для каждого ПараПараметров из ПарыПараметров цикл
		СтруктураПоиска1.Вставить("ИмяПараметра", ПараПараметров.Ключ);
		СтруктураПоиска2.Вставить("ИмяПараметра", ПараПараметров.Значение);
		МассивСтрок1 = ПараметрыЗапроса.НайтиСтроки(СтруктураПоиска1); 
		МассивСтрок2 = ПараметрыЗапроса.НайтиСтроки(СтруктураПоиска2);
		
		Если МассивСтрок1.Количество()<>0 и МассивСтрок2.Количество()<>0 тогда
			Индекс1 = ПараметрыЗапроса.Индекс(МассивСтрок1[0]);
			Индекс2 = ПараметрыЗапроса.Индекс(МассивСтрок2[0]);
			Если Индекс1>Индекс2 тогда
				ПараметрыЗапроса.Сдвинуть(Индекс2, Индекс1-Индекс2);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровЭтоСписокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокПараметров.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоСписок И ТипЗнч(ТекущиеДанные.ЗначениеПараметра) <> Тип("СписокЗначений") тогда
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(ТекущиеДанные.ЗначениеПараметра);
		ТекущиеДанные.ЗначениеПараметра = СписокЗначений;
		
	ИначеЕсли НЕ ТекущиеДанные.ЭтоСписок И ТипЗнч(ТекущиеДанные.ЗначениеПараметра) = Тип("СписокЗначений") тогда
		
		Если ТекущиеДанные.ЗначениеПараметра.Количество()=0 тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ЗначениеПараметра = ТекущиеДанные.ЗначениеПараметра[0].Значение;
		
	КонецЕсли;
	
	// До лучших времен
	//Если ТекущиеДанные.ЭтоСписок тогда
	//	Описатель = Новый ОписаниеОповещения("ИзменениеЗначенияПараметра", ЭтотОбъект, ТекущиеДанные.ПолучитьИдентификатор());
	//	ПоказатьВводЗначения(Описатель, ТекущиеДанные.ЗначениеПараметра);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеЗначенияПараметра(Значение, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.СписокПараметров.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьИдентификатор() <> ДополнительныеПараметры тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЗначениеПараметра = Значение; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	Если ТекущийЭлемент <> Элементы.ТекстЗапроса тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДерева = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ЭлементДерева = Неопределено тогда
		Возврат;
	КонецЕсли;

	НС = 0;	НК = 0;	КС = 0;	КК = 0;
	Элементы.ТекстЗапроса.ПолучитьГраницыВыделения(НС, НК, КС, КК);
	
	Если КК = 1 И НС<>КС тогда
		кСтрока = КС-1;
	Иначе
		кСтрока = КС;
	КонецЕсли;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ЭлементДерева.ТекстЗапроса);
	
	ТекстИзменен = Ложь;
	Для ИИ = НС ПО кСтрока цикл
		СтрокаЗапроса = ТД.ПолучитьСтроку(ИИ);
		Если Лев(СокрЛ(СтрокаЗапроса),2)<>"//" тогда
			СтрокаЗапроса = "//"+СтрокаЗапроса;
			ТД.ЗаменитьСтроку(ИИ, СтрокаЗапроса);
			ТекстИзменен = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстИзменен тогда
		ЭлементДерева.ТекстЗапроса = ТД.ПолучитьТекст();
		ОбновитьОтображениеДанных();
		Элементы.ТекстЗапроса.УстановитьГраницыВыделения(НС, НК, КС, КК);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКомментарий(Команда)
	
	Если ТекущийЭлемент <> Элементы.ТекстЗапроса тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДерева = Элементы.ДеревоЗапросов.ТекущиеДанные;   
	Если ЭлементДерева = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	НС = 0;	НК = 0;	КС = 0;	КК = 0;
	Элементы.ТекстЗапроса.ПолучитьГраницыВыделения(НС, НК, КС, КК);
	
	Если КК = 1 И НС<>КС тогда
		кСтрока = КС-1;
	Иначе
		кСтрока = КС;
	КонецЕсли;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ЭлементДерева.ТекстЗапроса);
	
	ТекстИзменен = Ложь;
	Для ИИ = НС ПО кСтрока цикл
		СтрокаЗапроса = ТД.ПолучитьСтроку(ИИ);
		Если Лев(СокрЛ(СтрокаЗапроса),2)="//" тогда
			ПС = Найти(СтрокаЗапроса,"//");
			СтрокаЗапроса = ?(ПС=1,"",Лев(СтрокаЗапроса, ПС-1))+Прав(СтрокаЗапроса, СтрДлина(СтрокаЗапроса)-ПС-1);
			ТД.ЗаменитьСтроку(ИИ, СтрокаЗапроса);
			ТекстИзменен = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстИзменен тогда
		ЭлементДерева.ТекстЗапроса = ТД.ПолучитьТекст();
		ОбновитьОтображениеДанных();
		Элементы.ТекстЗапроса.УстановитьГраницыВыделения(НС, НК, КС, КК);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСинтаксиса(Команда)
	
	ЭлементДерева = Элементы.ДеревоЗапросов.ТекущиеДанные;   
	Если ЭлементДерева = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	опОшибки = ПроверитьТекстЗапроса(ЭлементДерева.ТекстЗапроса); 
	Если опОшибки = "" тогда
		Состояние(нСтр("ru='Синтаксических ошибок не обнаружено!'; en='Syntax check passed successfully!'"), 100 ,нСтр("ru='Да ты неплох!'; en='Not bad!'"), БиблиотекаКартинок.КонструкторНастроекКомпоновкиДанных);
		Возврат;
	КонецЕсли;
	
	Если НЕ РазборОшибки(ЭлементДерева.ТекстЗапроса, опОшибки) тогда
		Сообщить(опОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РазборОшибки(ТекстЗапроса, Описание)
	
	НК = Найти(Описание, ": {("); 
	Если НК=0 тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	остТекст = Прав(Описание, СтрДлина(Описание)-НК-3);
	КК = Найти(остТекст, ")}");
	Если КК=0 тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	ЗначимоеОписание = Прав(остТекст, СтрДлина(остТекст)-КК-3);
	
	остТекст = Лев(остТекст, КК-1);
	НР = Найти(остТекст, ",");
	Если НР=0 тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Стр = СокрЛП(Лев(остТекст, НР-1));
	Стл = СокрЛП(Прав(остТекст, СтрДлина(остТекст)-НР));
	
	Если ЭтотОбъект.ТекущийЭлемент <> Элементы.ТекстЗапроса тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.ТекстЗапроса;	
	КонецЕсли;
	
	Попытка
		нСтр = Число(Стр);
		нСтл = Число(Стл);
		ТД = Новый ТекстовыйДокумент;
		ТД.УстановитьТекст(ТекстЗапроса);
		СтрокаСОшибкой = ТД.ПолучитьСтроку(нСтр);
		кСтл = СтрДлина(СтрокаСОшибкой)+1;
		Сообщить(ЗначимоеОписание);
		Если кСтл>=нСтл тогда
			ОбновитьОтображениеДанных();
			Элементы.ТекстЗапроса.УстановитьГраницыВыделения(нСтр, нСтл, нСтр, кСтл);
		КонецЕсли;
	Исключение
		Возврат ЛОЖЬ;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьТекстЗапроса(ТекстЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Попытка
		Запрос.НайтиПараметры();
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВнешнююОбработку(ИмяОбработки) Экспорт
	
	Обработка = Неопределено;

	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДополнительныеОтчетыИОбработки.Ссылка
			|ИЗ
			|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
			|ГДЕ
			|	ДополнительныеОтчетыИОбработки.ИмяОбъекта ПОДОБНО &ИмяОбъекта
			|	И НЕ ДополнительныеОтчетыИОбработки.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ИмяОбъекта", ИмяОбработки);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Обработка = Выборка.Ссылка;
			КонецЕсли; 
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
	Возврат Обработка;
	
КонецФункции 

&НаКлиенте
Процедура ВыполнитьЗапросВФоновомЗаданииКлиент()
	
	ВыполнитьЗапросВФоновомЗаданииСервер();
	
	Модуль_ДлительныеОперацииКлиент = ОбщийМодуль("ДлительныеОперацииКлиент");
	ФормаДлительнойОперации = Модуль_ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.1, Истина);

КонецПроцедуры 

&НаСервере
Процедура ВыполнитьЗапросВФоновомЗаданииСервер()
	
	ПараметрыВызова = ПодготовитьПараметры();
	ПараметрыРаботы = Новый Структура;
	ПараметрыРаботы.Вставить("ИмяМетода",           		  "ВыполнитьЗапросВФоне");
	ПараметрыРаботы.Вставить("ЭтоВнешняяОбработка", 		  Истина);
	ПараметрыРаботы.Вставить("ДополнительнаяОбработкаСсылка", КонсольЗапросовСсылка);
	ПараметрыРаботы.Вставить("ПараметрыВыполнения",           ПараметрыВызова);
	
	Модуль_ДлительныеОперации = ОбщийМодуль("ДлительныеОперации");
	Результат = Модуль_ДлительныеОперации.ЗапуститьВыполнениеВФоне(ЭтотОбъект.УникальныйИдентификатор, 
															"ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки",
															ПараметрыРаботы);
															
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	АдресХранилища       = Результат.АдресХранилища;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	Попытка
		ЗаданиеВыполнено = ПроверитьВыполнениеДлительнойОперации(ИдентификаторЗадания);
	Исключение
		ЗаданиеВыполнено = Ложь;
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Если ЗаданиеВыполнено Тогда
		
		Результат = ЗавершитьВыполнениеЗаданияНаСервере();
		ВывестиРезультатЗапроса(Результат);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			// если вернулся текст с описанием об ошибке, он выведется в форме длительной операции
			Модуль_ДлительныеОперацииКлиент = ОбщийМодуль("ДлительныеОперацииКлиент");
			Модуль_ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		КонецЕсли;
		Замер_Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если ТипЗнч(Результат) = Тип("Структура") тогда
			ЗаполнитьСсылкиВРежимеПодбораСсылок(Результат);
			Результат.Вставить("ОбщееВремя", Замер_Конец-Замер_Начало); 
			ВывестиПоказателиПроизводительности(Результат);
		КонецЕсли;
		
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗавершитьВыполнениеЗаданияНаСервере()

	РезультатЗадания = ПолучитьИзВременногоХранилища(АдресХранилища);
	Возврат РезультатЗадания;

КонецФункции 

&НаСервереБезКонтекста
Функция ПроверитьВыполнениеДлительнойОперации(ИдентификаторЗадания)
	
	Модуль_ДлительныеОперации = ОбщийМодуль("ДлительныеОперации");
	ЗаданиеВыполнено = Модуль_ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	Возврат ЗаданиеВыполнено;

КонецФункции 

&НаСервере
Процедура ПроверитьВозможностьРаботыВФоне()

	ВыполнятьВФоне = Истина;
	ИБФайловая = ИнформационнаяБазаФайловая();
	
	Если ИБФайловая ИЛИ НЕ ЗначениеЗаполнено(КонсольЗапросовСсылка) Тогда
		ВыполнятьВФоне = Ложь;
	КонецЕсли;

	Элементы.ВыполнятьВФоне.Видимость = ВыполнятьВФоне;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьВФоне(Команда)
	
	ВыполнятьВФоне = Не ВыполнятьВФоне;
	УправлениеВыполнятьВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРезультатЗапроса(Результат);
	
	ПолеРезультатаЗапроса = Новый ТабличныйДокумент();
	ТекстЗамера = "";                                             
	
	Если ТипЗнч(Результат) = Тип("Структура") тогда
		
		Если РезультатВОтдельномОкне Тогда
			Результат.Моксель.Показать(Элементы.ДеревоЗапросов.ТекущиеДанные.Запрос);
		Иначе
			ПолеРезультатаЗапроса = Результат.Моксель;
			Элементы.ПолеРезультатаЗапроса.ТекущаяОбласть = Результат.Моксель.Область(1, 1, 1, 1);
			УстановитьШиринуКолонок();
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Результат;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметры()
	
	ИД = Элементы.ДеревоЗапросов.ТекущаяСтрока;
	ЭлементДерева = ДеревоЗапросов.НайтиПоИдентификатору(ИД);
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("ТекстЗапроса",           	ЭлементДерева.ТекстЗапроса);
	ПараметрыВызова.Вставить("СпособВыгрузки",         	ЭлементДерева.СпособВыгрузки);
	ПараметрыВызова.Вставить("СоставРезультатов",      	СоставРезультатов);
	ПараметрыВызова.Вставить("ДляСсылокВыводитьГУИД",  	ДляСсылокВыводитьГУИД);
	ПараметрыВызова.Вставить("АктуальныеРезультаты", 	АктуальныеРезультаты);
	ПараметрыВызова.Вставить("КодУстановкиПараметров",	ЭлементДерева.ТекстПараметров);
	ПараметрыВызова.Вставить("ПараметрыЗапроса", 		ЭлементДерева.ПараметрыЗапроса.Выгрузить());	
	ПараметрыВызова.Вставить("АвтоширинаКолонок", 		АвтоширинаКолонок);	
	ПараметрыВызова.Вставить("ВыводитьНомераСтрок", 	ВыводитьНомераСтрок);	
	
	Возврат ПараметрыВызова;
	
КонецФункции

&НаКлиенте
Процедура ВывестиПоказателиПроизводительности(Результат)
	
	мТекстЗамера = нСтр("ru='Выполнение запроса: %1 мсек; Формирование результата: %2 мсек; Общее: %3 мсек; Cтрок: %4'; en='Query execution: %1 msec; Speadsheet making: %2 msec; Total: %3 msec; Rows: %4'");
	
	мТекстЗамера = СтрЗаменить(мТекстЗамера, "%1", Результат.ВремяВыполненияЗапроса);
	мТекстЗамера = СтрЗаменить(мТекстЗамера, "%2", Результат.ВремяФормированияТабДока);
	мТекстЗамера = СтрЗаменить(мТекстЗамера, "%3", Результат.ОбщееВремя);
	мТекстЗамера = СтрЗаменить(мТекстЗамера, "%4", Результат.ВсегоСтрок); //в разработке
	
	ТекстЗамера = мТекстЗамера;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоширинаКолонокПриИзменении(Элемент)
	УстановитьШиринуКолонок();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСсылки(Команда)
	
	Оповестить("ПодборСсылок", ОбработкаКонсольЗапросов.СписокСсылок.ВыгрузитьЗначения());
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Функция УправлениеВыполнятьВФоне()
//	Элементы.ВыполнитьВФоне.Пометка = ВыполнятьВФоне;
КонецФункции

&НаКлиенте
Функция ЗаполнитьСсылкиВРежимеПодбораСсылок(Результат)
	
	Если ОбработкаКонсольЗапросов.ПодборСсылок тогда
		Элементы.ВыборСсылок.КнопкаПоУмолчанию = Истина;
		ОбработкаКонсольЗапросов.СписокСсылок.ЗагрузитьЗначения(Результат.МассивСсылок);	
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "")
	
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;

КонецФункции

&НаКлиенте
Процедура ПоказатьСкрытьПараметры(Команда)
	
	Элементы.ПоказатьСкрытьПараметры.Пометка = НЕ Элементы.ПоказатьСкрытьПараметры.Пометка;
	Элементы.Дерево_Параметры.Видимость = Элементы.ПоказатьСкрытьПараметры.Пометка;
	Элементы.кнВыполнитьЗапрос.Видимость = НЕ Элементы.ПоказатьСкрытьПараметры.Пометка;
	
КонецПроцедуры


&НаКлиенте
Процедура МиниМакс_Свернуть(Команда)
	
	Элементы.ГруппаЛево.Ширина = 12;
	Элементы.ГруппаЛево.РастягиватьПоГоризонтали = Ложь;
	Элементы.ГруппаКнопкиМин.Видимость = Ложь;
	Элементы.СтраницаПараметры.Видимость = Ложь;
	Элементы.СтраницаНастройки.Видимость = Ложь;
	Элементы.СтраницаУстановкаПараметров.Видимость = Ложь;
	Элементы.ГруппаНиз.Видимость = Ложь;
	Элементы.МиниМакс_Свернуть.Видимость  = Ложь;
	Элементы.МинМакс_Развернуть.Видимость = Истина;
	Элементы.КомандыФайлаЗапросов.Видимость = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура МиниМакс_Развернуть(Команда)
	
	Элементы.ГруппаЛево.Ширина = 0;
	Элементы.ГруппаЛево.РастягиватьПоГоризонтали = Истина;
//	Элементы.ВыполнитьЗапрос.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Элементы.ГруппаКнопкиМин.Видимость = Истина;
	Элементы.СтраницаПараметры.Видимость = Истина;
	Элементы.СтраницаНастройки.Видимость = Истина;
	Элементы.СтраницаУстановкаПараметров.Видимость = Истина;
	Элементы.ГруппаНиз.Видимость = Истина;
	Элементы.МинМакс_Развернуть.Видимость = Ложь;
	Элементы.МиниМакс_Свернуть.Видимость  = Истина;
	Элементы.КомандыФайлаЗапросов.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура кнСкрытьПоказатели(Команда)
	
	ВыводитьПоказателиПроизводительности = Ложь;
	ВыводитьПоказателиПроизводительностиПриИзменении(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПоказателиПроизводительностиПриИзменении(Элемент)
	
	Элементы.ГруппаВидИЗамеры.Видимость = ВыводитьПоказателиПроизводительности;
	
КонецПроцедуры

&НаКлиенте
Процедура кнЛевоПраво(Команда)
	
	НастройкиСправа = Не НастройкиСправа;
	ОбновитьРасположениеПанелей();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасположениеПанелей()

	Если НастройкиСправа тогда
		Элементы.Переместить(Элементы.ГруппаПраво, Элементы.ГруппаЗапросы, Элементы.ГруппаЛево);	
	Иначе
		Элементы.Переместить(Элементы.ГруппаЛево, Элементы.ГруппаЗапросы, Элементы.ГруппаПраво);	
	КонецЕсли;
	
КонецПроцедуры
  
